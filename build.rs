use {
    std::{env, fs, io, path::Path},
    winresource::WindowsResource,
};

fn main() -> io::Result<()> {
    // Apply file info on windows
    if env::var_os("CARGO_CFG_WINDOWS").is_some() {
        let mut res = WindowsResource::new()

        // Descriptions
        res.set("CompanyName", "Alfie Likes Computers");
        res.set("FileDescription", "A safe way to extract assets from your Roblox installation.");
        res.set("OriginalFilename", "RoExtract-windows.exe");
        res.set("InternalName", "RoExtract");


        // Icon
        res.set_icon("assets/icon.ico");
        res.compile()?;
    }

    // Add compile date to the program's environment variables
    println!(
        "cargo:rustc-env=COMPILE_DATE={}",
        chrono::Utc::now().format("%Y-%m-%d %H:%M:%S")
    );

    // Embed path to locale files
    let locale_dir = Path::new("locales");
    let out_dir = env::var("OUT_DIR").unwrap();

    let dest_path = Path::new(&out_dir).join("locale_data.rs");
    let mut output = String::new();

    // Generate the code for locale
    output.push_str(
        r#"// ! GENERATED BY build.rs - EDIT IN build.rs IF NEEDED
fn get_locale_resources(locale: &str) -> Option<String> {
    let mut m  = HashMap::new();
    
    // locales discovered by build.rs are put here
"#,
    );

    let mut amount = 0;

    for entry in fs::read_dir(locale_dir).expect("Failed to read locales directory") {
        let path = entry.expect("Failed to read file entry").path();
        if let Some(lang) = path.file_stem().and_then(|s| s.to_str()) {
            if !path.metadata().unwrap().is_dir() {
                amount += 1; // Increase amount, needs to be known for static locale list
                let content = fs::read_to_string(&path).expect("Failed to read locale file");
                output.push_str(&format!(
                    "  m.insert(\"{lang}\".to_owned(), r#\"{content}\"#.to_owned());"
                ));

                println!("cargo:rerun-if-changed={}", path.display());
            }
        }
    }

    output.push_str(
        r#"
    return m.get(locale).cloned()
}

const LOCALES: [&str; "#,
    );

    output.push_str(&format!("{amount} ] = ["));

    let mut first = true;

    // Static list for all locales
    for entry in fs::read_dir(locale_dir).expect("Failed to read locales directory") {
        let path = entry.expect("Failed to read file entry").path();
        if let Some(lang) = path.file_stem().and_then(|s| s.to_str()) {
            if !path.metadata().unwrap().is_dir() {
                if first {
                    first = false;
                    output.push_str(&format!("\"{lang}\"")); // First one doesn't have a comma
                } else {
                    output.push_str(&format!(",\"{lang}\""));
                }
            }
        }
    }

    output.push_str("];");

    fs::write(dest_path, output).expect("Failed to write generated locale data");

    Ok(())
}
