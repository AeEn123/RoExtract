use {
    std::{
        env,
        io,
        path::Path,
        fs
    },
    winresource::WindowsResource,
};

fn main() -> io::Result<()> {
    // Apply icon on windows
    if env::var_os("CARGO_CFG_WINDOWS").is_some() {
        WindowsResource::new()
            // This path can be absolute, or relative to your crate root.
            .set_icon("assets/icon.ico")
            .compile()?;
    }

    // Embed path to locale files
    let locale_dir = Path::new("locales");
    let out_dir = env::var("OUT_DIR").unwrap();

    let dest_path = Path::new(&out_dir).join("locale_data.rs");
    let mut output = String::new();

    // Generate the code for locale
    output.push_str(r#"// ! GENERATED BY build.rs - EDIT IN build.rs IF NEEDED
fn get_locale_resources(locale: &str) -> Option<String> {
    let mut m  = HashMap::new();
    
    // locales discovered by build.rs are put here
"#);

    let mut amount = 0;

    for entry in fs::read_dir(locale_dir).expect("Failed to read locales directory") {
        let path = entry.expect("Failed to read file entry").path();
        if let Some(lang ) = path.file_stem().and_then(|s| s.to_str()) {
            if !path.metadata().unwrap().is_dir() {
                amount += 1; // Increase amount, needs to be known for static locale list
                let content = fs::read_to_string(&path).expect("Failed to read locale file");
                output.push_str(&format!("  m.insert(\"{}\".to_owned(), r#\"{}\"#.to_owned());", lang, content));
                
    
                println!("cargo:rerun-if-changed={}", path.display());
            }

        }
    }


    output.push_str(r#"
    return m.get(locale).cloned()
}

const LOCALES: [&str; "#);

    output.push_str(&format!("{} ] = [", amount));

    let mut first = true;

    // Static list for all locales
    for entry in fs::read_dir(locale_dir).expect("Failed to read locales directory") {
        let path = entry.expect("Failed to read file entry").path();
        if let Some(lang ) = path.file_stem().and_then(|s| s.to_str()) {
            if !path.metadata().unwrap().is_dir() {
                if first {
                    first = false;
                    output.push_str(&format!("\"{}\"", lang)); // First one doesn't have a comma
                } else {
                    output.push_str(&format!(",\"{}\"", lang));
                }
            }
            
        }
    }

    output.push_str("];");

    fs::write(dest_path, output).expect("Failed to write generated locale data");

    Ok(())
}